{"version":3,"sources":["db.js","constants.js","config.js","containers/CollectionInput/CollectionInput.js","store/actions.js","containers/User/User.js","containers/Main/Main.js","component/AppearanceText/AppearanceText.js","containers/CreateSets/CreateSets.js","containers/EditSets/EditSets.js","containers/EditVisual/EditVisual.js","containers/Scraper/Scraper.js","containers/LoginSuccess/LoginSuccess.js","containers/Navigator.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["getData","_x","_getData","apply","this","arguments","_callee","blobName","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","window","indexedDB","console","log","db","tx","store","finalResult","request","open","onupgradeneeded","result","createObjectStore","keyPath","onerror","event","concat","target","errorCode","onsuccess","transaction","objectStore","query","get","oncomplete","close","stop","putData","data","createIndex","unique","add","dataObject","put","mozIndexedDB","webkitIndexedDB","msIndexedDB","constants","CATEGORY","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","INVENTORY_TYPE","MOD_ID","ITEM_QUALITY","TRANSMOG_SOURCE","RACE_ID","30","31","32","33","34","35","36","37","CLASS_ID","MOG_SLOTS","SET_GROUPS","config","SITE_BACKEND","CollectionInput","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","rawDataFieldHandler","setState","input","value","state","loadUserCollection","userData","sourceArray","replace","split","collected","filter","s","map","parseInt","axios","post","userId","t0","_this2","react_default","createElement","className","href","rel","htmlFor","id","rows","placeholder","onChange","type","onClick","addDataClick","Component","connect","dispatch","toonOrder","b","pointDif","achievementPoints","levelDif","level","lastModified","transmogSetList","userCharacterData","output","characterData","sort","slice","toon","key","Math","random","toString","scope","name","realm","class","race","src","thumbnail","alt","d","Date","tz","Intl","DateTimeFormat","resolvedOptions","timeZone","toLocaleString","formatDate","containers_CollectionInput_CollectionInput","Main","AppearanceText","visualMetaForSlot","categoryID","navigateToVisualEdit","removeVisualFromSet","showEditButtons","showEmptySlots","emptyClick","tabIndex","visualID","style","display","role","onKeyPress","handleKeyPress","visualCollectedState","isCollected","tooltip","sources","dist_default","place","effect","source","itemCollectedState","sourceID","itemID","data-tip","data-for","aria-label","defaultProps","CreateSets","newSetNameFieldHandler","newSetNameText","newSetExpansionFieldHandler","newSetExpansionText","newSetGroupFieldHandler","newSetGroupText","newSetClick","asyncToGenerator","mark","_this$props","addTransmogSet","history","_this$state","newSet","group","expansion","saveSet","sent","setId","push","_ref2","_callee2","_context2","JSON","stringify","byCreationDate","aStamp","createdAt","_this$props2","visualMetaHash","_this$state2","workingSetArray","toConsumableArray","workingSet","appearances","slot","workingVisualID","floor","component_AppearanceText_AppearanceText","fetchNameForItem","i","withRouter","EditSets","searchFieldHandler","filterString","setSelected","_ref","selectedSlot","addVisualToSet","updateVisualMetaName","_x2","sourceIDHash","updateVisualMetaData","newName","updateObject","newVisualMeta","objectSpread","_x3","_x4","setNameHandler","startRename","_ref3","_callee3","currentName","_context3","addEventListener","keyDownHandler","renamingSet","_x5","renameSet","_ref4","_callee4","e","updateSetName","_context4","preventDefault","removeEventListener","_x6","_ref5","_callee5","_context5","delete","_x7","_x8","match","params","sourceList","sets","length","slotList","setNameDiv","find","row","onSubmit","autoComplete","text","items","Number","isAssigned","toLowerCase","includes","rowClass","changingSet","visualMetaData","EditVisual","goBack","visualMeta","visual","Array","isArray","Scraper","addSearchStringHandler","saveData","newList","filterByName","newFilterString","item","addScrapedData","parsedData","parse","filteredList","invType","quality","itemModID","sourceType","newData","LoginSuccess","updateAppState","updateUserCollection","location","values","queryString","search","incomingUserData","battleNetToken","access_token","battleTag","battletag","decodeURIComponent","url","characterResult","characters","defaults","headers","common","authorization","userResult","t1","Navigator","loadSetData","addSourceData","userDataQuery","keys","visualsList","t2","loginComponent","react_router_dom","to","exact","activeClassName","adminOnly","writeOnly","react_router","path","component","User","render","routeProps","containers_LoginSuccess_LoginSuccess","setData","App","src_containers_Navigator","Boolean","hostname","initialState","updateVisualMetaHash","userCollectedSources","undefined","workingVisualHash","forEach","isHideVisual","reducer","action","workingSourceHash","newSourceList","updatedVisualMetaHash","workingUserData","workingVisualMetaHash","combined","workingTransmogSetList","newSetData","setHash","set","slotNumber","newSetList","_action$data","_state$sourceIDHash$s","setIndex","findIndex","_action$data2","_action$data3","stateClone","createStore","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd824d72.chunk.js","sourcesContent":["// Backward compatibility\nif (!window.indexedDB) {\n    window.indexedDB = window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n}\n\nexport async function getData(blobName) {\n    return new Promise((resolve) => {\n        if (!window.indexedDB) {\n            console.log('No browser memory available. Please update your web browser.');\n            resolve(null);\n        }\n    \n        const request = window.indexedDB.open('CompletionistDatabase', 1);\n        let db;\n        let tx;\n        let store;\n        // let index;\n        let finalResult;\n        \n        request.onupgradeneeded = function dbUpgradeNeeded() {\n            db = request.result;\n            store = db.createObjectStore('CompletionistStore', { keyPath: 'blobName' });\n            // index = db.createIndex(blobName, blobName, { unique: true });\n        };\n        \n        request.onerror = function dbOpenError(event) {\n            console.log(`There was an error opening the database: ${event.target.errorCode}`);\n            resolve(false);\n        };\n    \n        request.onsuccess = function dbOpenSuccess() {\n            db = request.result;\n            tx = db.transaction('CompletionistStore', 'readwrite');\n            store = tx.objectStore('CompletionistStore');\n            // index = store.index(blobName);\n                    \n            db.onerror = function dbError(event) {\n                console.log(`DB error: ${event.target.errorCode}`);\n                resolve(false);\n            };\n        \n            // transaction example\n            // store.put({qID: 1, questionText: 'The sky is blue.', correctAnser: true});\n            // store.put({qID: 2, questionText: 'The grass is green.', correctAnser: true});\n            \n            // const q1 = store.get(1);\n            // q1.onsuccess = function () {\n            //     console.log(q1.result);\n            // };\n        \n            const query = store.get(blobName);\n            query.onsuccess = function onQuerySuccess() {\n                const { result } = query;\n                finalResult = result;\n            };\n        \n            tx.oncomplete = function dbClose() {\n                db.close();\n                resolve(finalResult);\n            };\n        };\n    });\n}\n\n\nexport function putData(blobName, data) {\n    return new Promise((resolve) => {\n        if (!window.indexedDB) {\n            console.log('No browser memory available. Please update your web browser.');\n            resolve();\n        }\n    \n        const request = window.indexedDB.open('CompletionistDatabase', 1);\n        let db;\n        let tx;\n        let store;\n        let innerstore;\n        \n        request.onupgradeneeded = function dbUpgradeNeeded(event) {\n            db = event.target.result;\n\n            store = db.createObjectStore('CompletionistStore', { keyPath: 'blobName' });\n            \n            db.createIndex(blobName, blobName, { unique: true });\n            \n            store.transaction.oncomplete = function storeComplete() {\n                // Store values in the newly created objectStore.\n                innerstore = db.transaction('CompletionistStore', 'readwrite').objectStore('CompletionistStore');\n                innerstore.add({ blobName, data });\n                db.close();\n                resolve();\n            };\n        };\n        \n        request.onerror = function dbOpenError(event) {\n            console.log(`There was an error opening the database: ${event.target.errorCode}`);\n            resolve();\n        };\n    \n        request.onsuccess = function dbOpenSuccess() {\n            db = request.result;\n            tx = db.transaction('CompletionistStore', 'readwrite');\n            store = tx.objectStore('CompletionistStore');\n            // store.index(blobName);\n        \n            db.onerror = function dbError(event) {\n                console.log(`DB error: ${event.target.errorCode}`);\n            };\n        \n            // transaction example\n            const dataObject = { blobName, data };\n            store.put(dataObject);\n            // store.put({qID: 2, questionText: 'The grass is green.', correctAnser: true});\n            \n            // const q1 = store.get(1);\n            // q1.onsuccess = function () {\n            //     console.log(q1.result);\n            // };\n        \n            // const qs = store.get('The grass is green.');\n            // qs.onsuccess = function () {\n            //     console.log(qs.result.questionText);\n            // };\n        \n        \n            tx.oncomplete = function dbClose() {\n                db.close();\n                resolve();\n            };\n        };\n    });\n}\n","const constants = {\n    CATEGORY: {\n        0: 'Unobtainable',\n        1: 'Head',\n        2: 'Shoulder',\n        3: 'Back',\n        4: 'Chest',\n        5: 'Shirt',\n        6: 'Tabard',\n        7: 'Wrist',\n        8: 'Hands',\n        9: 'Waist',\n        10: 'Legs',\n        11: 'Feet',\n        12: 'Wands',\n        13: 'One-Handed Axes',\n        14: 'One-Handed Swords',\n        15: 'One-Handed Maces',\n        16: 'Daggers',\n        17: 'Fist Weapons',\n        18: 'Shields',\n        19: 'Held In Off-hand',\n        20: 'Two-Handed Axes',\n        21: 'Two-Handed Swords',\n        22: 'Two-Handed Maces',\n        23: 'Staves',\n        24: 'Polearms',\n        25: 'Bows',\n        26: 'Guns',\n        27: 'Crossbows',\n        28: 'Warglaives',\n        29: 'Legion Artifacts'\n    },\n    INVENTORY_TYPE: {\n        1: 'INVTYPE_NON_EQUIP',\n        2: 'INVTYPE_HEAD',\n        3: 'INVTYPE_NECK',\n        4: 'INVTYPE_SHOULDER',\n        5: 'INVTYPE_BODY',\n        6: 'INVTYPE_CHEST',\n        7: 'INVTYPE_WAIST',\n        8: 'INVTYPE_LEGS',\n        9: 'INVTYPE_FEET',\n        10: 'INVTYPE_WRIST',\n        11: 'INVTYPE_HAND',\n        12: 'INVTYPE_FINGER',\n        13: 'INVTYPE_TRINKET',\n        14: 'INVTYPE_WEAPON',\n        15: 'INVTYPE_SHIELD',\n        16: 'INVTYPE_RANGED',\n        17: 'INVTYPE_CLOAK',\n        18: 'INVTYPE_2HWEAPON',\n        19: 'INVTYPE_BAG',\n        20: 'INVTYPE_TABARD',\n        21: 'INVTYPE_ROBE',\n        22: 'INVTYPE_WEAPONMAINHAND',\n        23: 'INVTYPE_WEAPONOFFHAND',\n        24: 'INVTYPE_HOLDABLE',\n        25: 'INVTYPE_AMMO',\n        26: 'INVTYPE_THROWN',\n        27: 'INVTYPE_RANGEDRIGHT',\n        28: 'INVTYPE_QUIVER',\n        29: 'INVTYPE_RELIC'\n    },\n    MOD_ID: {\n        0: '',\n        1: 'Normal',\n        2: 'Heroic',\n        3: 'Mythic',\n        4: 'Raid Finder/Elite (PvP)'\n    },\n    ITEM_QUALITY: {\n        0: 'Poor',\n        1: 'Common',\n        2: 'Uncommon',\n        3: 'Rare',\n        4: 'Epic',\n        5: 'Legendary',\n        6: 'Artifact',\n        7: 'Heirloom',\n        8: 'WoW Token'\n    },\n    TRANSMOG_SOURCE: {\n        1: 'Boss Drop',\n        2: 'Quest',\n        3: 'Vendor',\n        4: 'World Drop',\n        5: 'Achievement',\n        6: 'Profession',\n    },\n    RACE_ID: {\n        1: 'Human',\n        2: 'Orc',\n        3: 'Dwarf',\n        4: 'Night Elf',\n        5: 'Undead',\n        6: 'Tauren',\n        7: 'Gnome',\n        8: 'Troll',\n        9: 'Goblin',\n        10: 'Blood Elf',\n        11: 'Draenei',\n        12: 'Fel Orc',\n        13: 'Naga',\n        14: 'Broken',\n        15: 'Skeleton',\n        16: 'Vrykul',\n        17: 'Tuskarr',\n        18: 'Forest Troll',\n        19: 'Taunka',\n        20: 'Northrend Skeleton',\n        21: 'Ice Troll',\n        22: 'Worgen',\n        23: 'Gilnean',\n        24: 'Pandaren',\n        25: 'Pandaren',\n        26: 'Pandaren',\n        27: 'Nightborne',\n        28: 'Highmountain Tauren',\n        29: 'Void Elf',\n        30: 'Lightforged Draenei',\n        31: 'Zandalari Troll',\n        32: 'Kul Tiran',\n        33: 'Human',\n        34: 'Dark Iron Dwarf',\n        35: 'Vulpera',\n        36: 'Mag\\'har Orc',\n        37: 'Mechagnome',\n    },\n    CLASS_ID: {\n        1: 'Warrior',\n        2: 'Paladin',\n        3: 'Hunter',\n        4: 'Rogue',\n        5: 'Priest',\n        6: 'Death Knight',\n        7: 'Shaman',\n        8: 'Mage',\n        9: 'Warlock',\n        10: 'Monk',\n        11: 'Druid',\n        12: 'Demon Hunter',\n    },\n    MOG_SLOTS: [\n        '1', \n        '2', \n        '4', \n        '7', \n        '8', \n        '9', \n        '10', \n        '11'\n    ],\n    SET_GROUPS: [\n        'Warlock',\n        'Mage',\n        'Priest',\n        'Rogue',\n        'Druid',\n        'Demon Hunter',\n        'Hunter',\n        'Shaman',\n        'Warrior',\n        'Paladin',\n        'Death Knight',\n        'Cloth',\n        'Leather',\n        'Mail',\n        'Plate'\n    ]\n};\n\nexport default constants;\n","const config = { SITE_BACKEND: 'http://www.completionist.guru/api' };\n\nexport default config;\n","/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable no-console */\n/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport * as db from '../../db';\nimport * as actionTypes from '../../store/actions';\nimport config from '../../config';\nimport './CollectionInput.css';\n\nclass CollectionInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { input: '' };\n  }\n\n  rawDataFieldHandler = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  async addDataClick() {\n    const { input } = this.state;\n    const { loadUserCollection, userData } = this.props;\n    const sourceArray = input.replace(/['\"]+/g, '').split(':');\n    const collected = sourceArray.filter((s) => s !== '').map((s) => parseInt(s, 10));\n    userData.collected = collected;\n    loadUserCollection(userData);\n    db.putData('userData', userData);\n\n    try {\n      await axios.post(`${config.SITE_BACKEND}/collected/${userData.userId}`, collected);\n      this.setState({ input: '' });\n    } catch (err) {\n      console.log('Axios error saving collected');\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <p>\n            Tracking your collected transmog on this website requires the use\n            of the Completionist addon, which can be installed through the\n            <a \n              href=\"https://www.curseforge.com/twitch-client\" \n              rel=\"noopener noreferrer\" \n              target=\"_blank\" \n              className=\"basic-link\"\n            >\n              Twitch Desktop App.\n            </a>\n          </p>\n          <p>\n            Once you have installed the Completionist addon, log in and type \"/comp transmog\".\n            The game might freeze for a moment. A window will pop up displaying a list of numbers.\n            Use Ctrl-C to copy, then paste it all in the window over there ---->\n          </p>\n        </div>\n        <div className=\"col\">\n          <div className=\"form-group\">\n            <label htmlFor=\"rawInput\">\n              Input:\n              <textarea \n                id=\"rawInput\" \n                className=\"form-control\"\n                rows=\"5\"\n                placeholder=\"Paste Data Here\"\n                onChange={this.rawDataFieldHandler}\n                value={input}\n              />\n            </label>\n            <button \n              type=\"button\"\n              onClick={() => this.addDataClick()}\n              className=\"add-data-button\"\n            >\n              Add Data\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCollectionInput.propTypes = {\n  userData: PropTypes.object.isRequired, \n  loadUserCollection: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ userData: state.userData });\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadUserCollection: (collected) => dispatch({\n    type: actionTypes.ADD_USER_DATA,\n    data: collected\n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CollectionInput);\n","export const ADD_SOURCE_DATA = 'ADD_SOURCE_DATA';\nexport const ADD_USER_DATA = 'ADD_USER_DATA';\nexport const ADD_TRANSMOG_SET = 'ADD_TRANSMOG_SET';\nexport const RENAME_TRANSMOG_SET = 'RENAME_TRANSMOG_SET';\nexport const LOAD_TRANSMOG_SETS = 'LOAD_TRANSMOG_SETS';\nexport const ADD_VISUAL_TO_SET = 'ADD_VISUAL_TO_SET';\nexport const UPDATE_VISUAL_ID_HASH = 'UPDATE_VISUAL_ID_HASH';\nexport const FETCH_NAME_FOR_ITEM = 'FETCH_NAME_FOR_ITEM';\nexport const UPDATE_VISUAL_META_DATA = 'UPDATE_VISUAL_META_DATA';\nexport const REMOVE_VISUAL_FROM_SET = 'REMOVE_VISUAL_FROM_SET';\nexport const ADD_BATTLENET_TOKEN = 'ADD_BATTLENET_TOKEN';\nexport const ADD_STATE = 'ADD_STATE';\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport constants from '../../constants';\nimport CollectionInput from '../CollectionInput/CollectionInput';\n\nimport './User.css';  \n\n// import axios from 'axios';\n\n// import './Scraper.css';\n// import constants from '../../constants';\n\nconst formatDate = (d) => {\n  const event = new Date(d);\n  const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return event.toLocaleString('en-US', { timeZone: tz });\n};\n\nconst toonOrder = (a, b) => {\n  const pointDif = b.achievementPoints - a.achievementPoints;\n  if (pointDif !== 0) return pointDif;\n  const levelDif = b.level - a.level;\n  if (levelDif !== 0) return levelDif;\n  return b.lastModified - a.lastModified;\n};\n\nconst User = (props) => {\n  const { userData } = props;\n\n  // TODO: Paginate\n\n  let output;\n  \n  if (userData && userData.characterData) {\n    output = userData.characterData.sort(toonOrder).slice(0, 10).map((toon) => (\n      <tr\n        key={Math.random().toString(36).replace(/[^a-z]+/g, '')}\n      >\n        <th scope=\"col\">{toon.name}</th>\n        <td>{toon.realm}</td>\n        <td>{constants.CLASS_ID[toon.class]}</td>\n        <td>{constants.RACE_ID[toon.race]}</td>\n        <td>{toon.level}</td>\n        <td>{toon.achievementPoints}</td>\n        <td><img src={`https://render-us.worldofwarcraft.com/character/${toon.thumbnail}`} alt=\"Toon Avatar\" /></td>\n        <td>{formatDate(toon.lastModified)}</td>\n      </tr>\n    ));\n  }\n\n  return (\n    <div className=\"container User\">\n      <div className=\"User-title\">\n        <h1>\n          User Page\n        </h1>\n      </div>\n      <CollectionInput />\n      <div>\n        <h2>Toon Roster</h2>\n        <table className=\"table table-dark\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Realm</th>\n              <th scope=\"col\">Class</th>\n              <th scope=\"col\">Race</th>\n              <th scope=\"col\">Level</th>\n              <th scope=\"col\">Points</th>\n              <th scope=\"col\">Thumb</th>\n              <th scope=\"col\">Last Played</th>\n            </tr>\n          </thead>\n          <tbody>\n            {output}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\n\nUser.propTypes = { userData: PropTypes.object.isRequired, };\n\n// User.defaultProps = { userData: {} };\n\nconst mapStateToProps = (state) => ({\n  transmogSetList: state.transmogSetList,\n  userCharacterData: state.userCharacterData,\n  userData: state.userData,\n});\n\nexport default connect(mapStateToProps)(User);\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\n\nimport './Main.css';\n\nconst Main = () => {\n  console.log('-- TODO: create Main page --');\n\n  return (\n    <div className=\"container Main\">\n      <h1>Main Page</h1>\n    </div>\n  );\n};\n\n\n// Main.propTypes = { MainData: PropTypes.object.isRequired, };\n\n// Main.defaultProps = { MainData: {} };\n\n// const mapStateToProps = state => ({\n//   transmogSetList: state.transmogSetList,\n//   MainCharacterData: state.MainCharacterData,\n//   MainData: state.MainData,\n// });\n\nexport default Main;\n","/* eslint-disable no-console */\n/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ReactTooltip from 'react-tooltip';\nimport constants from '../../constants';\n\nimport './AppearanceText.css';\n\nconst AppearanceText = (props) => {\n  const {\n    visualMetaForSlot,\n    categoryID,\n    navigateToVisualEdit,\n    removeVisualFromSet,\n    showEditButtons,\n    showEmptySlots,\n    emptyClick,\n    tabIndex,\n  } = props;\n\n  if (!visualMetaForSlot || !visualMetaForSlot.visualID) {\n    return (\n      <div\n        className=\"row\"\n        style={(showEmptySlots) ? { display: 'block' } : { display: 'none' }}\n      >\n        <div\n          className=\"col-12\"\n          role=\"button\"\n          onClick={() => emptyClick()}\n          onKeyPress={() => { }}\n          tabIndex={tabIndex}\n        >\n          {`${constants.CATEGORY[categoryID]}:`}\n        </div>\n      </div>\n    );\n  }\n\n  const handleKeyPress = (event) => {\n    // TODO: Implement keyboard accessibility\n    console.log(`Key pressed: '${event.key}'`);\n  };\n\n  const visualCollectedState = (visualMetaForSlot.isCollected ? ' collected' : '');\n  let tooltip = '';\n  if (visualMetaForSlot && visualMetaForSlot.sources) {\n    tooltip = (\n      <ReactTooltip id={`visual${visualMetaForSlot.visualID}`} place=\"right\" type=\"dark\" effect=\"float\">\n        {visualMetaForSlot.sources.map((source) => {\n          const itemCollectedState = source.isCollected ? 'collected' : '';\n          return (\n            <div key={source.sourceID} className={itemCollectedState}>\n              {`${source.name}(${source.itemID})`}\n            </div>\n          );\n        })}\n      </ReactTooltip>\n    );\n  }\n\n  return (\n    <div\n      data-tip\n      data-for={`visual${visualMetaForSlot.visualID}`}\n      className=\"item-row\"\n    >\n      {tooltip}\n      <div className=\"row\">\n        <div className=\"col-3\">\n          {`${constants.CATEGORY[categoryID]}:`}\n        </div>\n        <div className={visualCollectedState}>\n          {visualMetaForSlot.name}\n        </div>\n        <div style={showEditButtons ? { display: 'block' } : { display: 'none' }}>\n          <button\n            type=\"button\"\n            className=\"invisible-button\"\n            onClick={() => navigateToVisualEdit(visualMetaForSlot.visualID)}\n            onKeyPress={handleKeyPress}\n          >\n            <span\n              role=\"img\"\n              className=\"rename-appearance\"\n              aria-label=\"change appearance name\"\n            >\n              &nbsp;⥃\n            </span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"invisible-button\"\n            onClick={() => removeVisualFromSet(visualMetaForSlot.visualID)}\n            onKeyPress={handleKeyPress}\n          >\n            <span\n              role=\"img\"\n              className=\"rename-appearance\"\n              aria-label=\"change appearance name\"\n            >\n              &nbsp;⊗\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAppearanceText.propTypes = {\n  showEditButtons: PropTypes.bool,\n  showEmptySlots: PropTypes.bool,\n  tabIndex: PropTypes.string,\n  categoryID: PropTypes.string.isRequired,\n  visualMetaForSlot: PropTypes.object,\n  emptyClick: PropTypes.func.isRequired,\n  removeVisualFromSet: PropTypes.func.isRequired,\n  navigateToVisualEdit: PropTypes.func.isRequired,\n};\n\nAppearanceText.defaultProps = {\n  visualMetaForSlot: null,\n  tabIndex: null,\n  showEditButtons: true,\n  showEmptySlots: true,\n};\n\nexport default AppearanceText;\n","/* eslint-disable max-len */\n/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nimport * as actionTypes from '../../store/actions';\nimport AppearanceText from '../../component/AppearanceText/AppearanceText';\nimport constants from '../../constants';\nimport config from '../../config';\n\nimport './CreateSets.css';\n\nclass CreateSets extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newSetNameText: '',\n      newSetGroupText: '',\n      newSetExpansionText: '',\n    };\n  }\n\n  newSetNameFieldHandler = (event) => {\n    this.setState({ newSetNameText: event.target.value });\n  }\n\n  newSetExpansionFieldHandler = (event) => {\n    this.setState({ newSetExpansionText: event.target.value });\n  }\n\n  newSetGroupFieldHandler = (event) => {\n    this.setState({ newSetGroupText: event.target.value });\n  }\n\n  newSetClick = async () => {\n    const { \n      addTransmogSet,\n      history,\n    } = this.props;\n    const {\n      newSetNameText,\n      newSetGroupText,\n      newSetExpansionText\n    } = this.state;\n    \n    const newSet = {\n      name: newSetNameText,\n      group: newSetGroupText,\n      expansion: newSetExpansionText\n    };\n    \n    const result = await this.saveSet(newSet);\n\n    if (result.setId) {\n      newSet.setId = result.setId;\n      addTransmogSet(newSet);\n      this.setState({ newSetNameText: '' });\n      history.push(`/set/edit/${newSet.setId}`);\n    }\n  }\n\n  saveSet = async (newSet) => {\n    try {\n      const result = await axios.post(`${config.SITE_BACKEND}/set`, { data: newSet });\n      console.log('--> result.data :', JSON.stringify(result.data, null, 2));\n      return result.data;\n    } catch (err) {\n      console.log('Axios Error saving set');\n      console.log(err);\n      return {};\n    }\n  }\n\n  byCreationDate = (a, b) => {\n    const aStamp = new Date(a.createdAt);\n    const bStamp = new Date(b.createdAt);\n    return bStamp - aStamp;\n  }\n\n  render() {\n    const { transmogSetList, visualMetaHash, history, } = this.props;\n    const { newSetExpansionText, newSetNameText, newSetGroupText } = this.state;\n\n    const workingSetArray = [...transmogSetList];\n    let output = '';\n    if (workingSetArray) {\n      workingSetArray.sort(this.byCreationDate);\n      output = (\n        <div className=\"data-table\">\n          <table className=\"table table-hover table-dark\">\n            <thead>\n              <tr className=\"d-flex\">\n                <th className=\"col-1\">Ex.</th>\n                <th className=\"col-3\">Group</th>\n                <th className=\"col-3\">Name</th>\n                <th className=\"col\">Items</th>\n              </tr>\n            </thead>\n            <tbody>\n              {workingSetArray.map((workingSet) => {\n                let appearances = '';\n                appearances = constants.MOG_SLOTS.map((slot) => {\n                  let workingVisualID = workingSet[slot];\n                  const visualMetaForSlot = visualMetaHash[workingVisualID];\n                  if (visualMetaForSlot) {\n                    visualMetaForSlot.visualID = workingVisualID;\n                    if (!workingVisualID) {\n                      workingVisualID = Math.floor(Math.random() * 10000);\n                    }\n                    return (\n                      <div key={workingVisualID}>\n                        <AppearanceText\n                          visualMetaForSlot={visualMetaForSlot}\n                          categoryID={slot}\n                          fetchNameForItem={() => { }}\n                          navigateToVisualEdit={() => { }}\n                          removeVisualFromSet={() => { }}\n                          showEditButtons={false}\n                          showEmptySlots={false}\n                          emptyClick={() => { }}\n                        />\n                      </div>\n                    );\n                  } \n                  return '';\n                });\n                // }\n\n                return (\n                  <tr\n                    key={workingSet.setId}\n                    className={workingSet.isCollected ? 'd-flex green' : 'd-flex'}\n                    onClick={() => history.push(`/set/edit/${workingSet.setId}`)}\n                  >\n                    <td className=\"col-1\">{workingSet.expansion}</td>\n                    <td className=\"col-3\">{workingSet.group}</td>\n                    <td className=\"col-3\">{workingSet.name}</td>\n                    <td className=\"col\">{appearances}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CreateSets\">\n        <div className=\"form-group\">\n          <div className=\"row\">\n            <div className=\"col-md-1\">\n              <label className=\"formLabel\" htmlFor=\"newSetExpansion\">\n                Patch:\n                <input id=\"newSetExpansion\" className=\"form-control\" placeholder=\"0.0\" onChange={this.newSetExpansionFieldHandler} value={newSetExpansionText} />\n              </label>\n            </div>\n            <div className=\"col-md-2\">\n              <label className=\"formLabel\" htmlFor=\"newSetGroup\">\n                Class:\n                {/* <input id=\"newSetGroup\" className=\"form-control\" placeholder=\"Class Name or Armor Type\" onChange={this.newSetGroupFieldHandler} value={newSetGroupText} /> */}\n                <div id=\"newSetGroup\">\n                  <select className=\"form-control\" value={newSetGroupText} onChange={this.newSetGroupFieldHandler}>\n                    {constants.SET_GROUPS.map((type, i) => (\n                      <option key={type} value={type}>{type}</option>\n                    ))}\n                  </select>\n                </div>\n              </label>\n            </div>\n            <div className=\"col\">\n              <label className=\"formLabel\" htmlFor=\"newSetName\">\n                Set Name:\n                <input id=\"newSetName\" className=\"form-control\" placeholder=\"Example: Warmongering Gladiator's Plate\" onChange={this.newSetNameFieldHandler} value={newSetNameText} />\n              </label>\n            </div>\n            <div className=\"col-md-2\">\n              <button type=\"submit\" className=\"add-set-button\" onClick={() => this.newSetClick()}>New Set</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"outputField\">\n          {output}\n        </div>\n      </div>\n    );\n  }\n}\n\nCreateSets.propTypes = {\n  transmogSetList: PropTypes.array.isRequired,\n  history: PropTypes.object.isRequired,\n  visualMetaHash: PropTypes.object.isRequired,\n  addTransmogSet: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  transmogSetList: state.transmogSetList,\n  visualMetaHash: state.visualMetaHash,\n});\n\nconst mapDispatchToProps = (dispatch) => (\n  { addTransmogSet: (newSet) => dispatch({ type: actionTypes.ADD_TRANSMOG_SET, data: newSet }), }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CreateSets));\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nimport AppearanceText from '../../component/AppearanceText/AppearanceText';\nimport * as actionTypes from '../../store/actions';\nimport constants from '../../constants';\nimport config from '../../config';\n\nimport './EditSets.css';\n\nclass EditSets extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterString: '',\n      selectedSlot: null,\n      setId: null,\n      renamingSet: false,\n      newName: ''\n    };\n  }\n  \n\n  componentDidMount() {\n    const { match } = this.props;\n    const { setId } = this.state;\n    if (setId !== match.params.setId) {\n      this.setState({ setId: match.params.setId });\n    }\n  }\n\n  searchFieldHandler = (event) => {\n    this.setState({ filterString: event.target.value });\n  }\n\n  setSelected = async (type, value) => {\n    const { selectedSlot } = this.state;\n    const { setId } = this.state;\n\n    const { addVisualToSet } = this.props;\n\n    if (type === 'slot') {\n      this.setState({ selectedSlot: value });\n    } else if (type === 'visual' && selectedSlot) {\n      const { sourceID, visualID } = value;\n\n      const result = await axios.post(`${config.SITE_BACKEND}/set/${setId}`, { visualID, slot: selectedSlot });\n      console.log(`--> adding visual ID ${visualID} to slot ${selectedSlot}. Result :`, result);\n\n      await this.updateVisualMetaName(sourceID, visualID);\n\n      addVisualToSet(setId, selectedSlot, sourceID);\n      this.setState({ selectedSlot: null });\n    }\n  }\n\n  updateVisualMetaName = async (sourceID, visualID) => {\n    const { sourceIDHash, visualMetaHash, updateVisualMetaData } = this.props;\n\n    const newName = sourceIDHash[sourceID].name;\n    \n    try {\n      const updateObject = { ...visualMetaHash[visualID] };\n      updateObject.name = newName;\n      delete updateObject.sources;\n\n      const result = await axios.post(`${config.SITE_BACKEND}/visuals/${visualID}`, updateObject);\n      console.log('--> axios visualMeta update result :', result);\n      \n      const newVisualMeta = visualMetaHash[visualID];\n      newVisualMeta.name = newName;\n      updateVisualMetaData([newVisualMeta]);\n    } catch (err) {\n      console.log(`Error updating visualMeta for visualID:${visualID}`);\n    }\n  }\n\n  setNameHandler = (event) => {\n    this.setState({ newName: event.target.value });\n  }\n\n  startRename = async (currentName) => {\n    window.addEventListener('keydown', this.keyDownHandler);\n    this.setState({ renamingSet: true, newName: currentName });\n  }\n\n  renameSet = async (e) => {\n    e.preventDefault();\n    window.removeEventListener('keydown', this.keyDownHandler);\n\n    const { updateSetName } = this.props;\n    const { newName } = this.state;\n\n    if (newName === '') {\n      // TODO: Throw error\n      return;\n    }\n\n    const { setId } = this.state;\n\n    const result = await axios.post(`${config.SITE_BACKEND}/set/${setId}`, { name: newName });\n    console.log(`--> Renaming set to ${newName}. Result :`, result);\n\n    // Update data in reducer\n    updateSetName(setId, newName);\n    this.setState({ renamingSet: false });\n  }\n\n  keyDownHandler = (e) => {\n    const { renamingSet } = this.state;\n    if (e.key === 'Escape' && renamingSet) {\n      this.setState({ renamingSet: false });\n    }\n  }\n\n  removeVisualFromSet = async (slot, visualID) => {\n    const { setId } = this.state;\n    const { removeVisualFromSet } = this.props;\n\n    try {\n      await axios.delete(`${config.SITE_BACKEND}/set/${setId}/slot/${slot}/visual/${visualID}`);\n      removeVisualFromSet(setId, slot, visualID);\n    } catch (err) {\n      console.log('--> remove visual from set error :', err);\n    }\n  }\n\n  handleKeyPress = () => {\n    // TODO handle key press\n  }\n\n  render() {\n    const {\n      setId,\n      filterString,\n      selectedSlot,\n      renamingSet,\n      newName\n    } = this.state;\n\n    const {\n      transmogSetList,\n      visualMetaHash,\n      history,\n      sourceList\n    } = this.props;\n\n    let sets = '';\n    \n    if (setId && transmogSetList && transmogSetList.length > 0) {\n      const workingSet = transmogSetList.find((row) => row.setId === setId);\n      let slotList = [];\n\n      slotList = constants.MOG_SLOTS.map((slot) => {\n        const workingVisualID = workingSet[slot];\n        const visualMetaForSlot = visualMetaHash[workingVisualID];\n        if (visualMetaForSlot) visualMetaForSlot.visualID = workingVisualID;\n        return (\n          <div \n            className={selectedSlot === slot ? 'selected' : ''}\n            key={Math.random().toString(36).replace(/[^a-z]+/g, '')}\n          >\n            <AppearanceText\n              visualMetaForSlot={visualMetaForSlot}\n              categoryID={slot}\n              tabIndex={slot}\n              navigateToVisualEdit={(visualID) => history.push(`/visual/edit/${visualID}`)}\n              removeVisualFromSet={(visualID) => this.removeVisualFromSet(slot, visualID)}\n              emptyClick={() => this.setSelected('slot', slot)}\n            />\n          </div>\n        ); \n      });\n\n      let setNameDiv;\n      if (renamingSet) {\n        setNameDiv = (\n          <form className=\"filters form-group\" onSubmit={(e) => this.renameSet(e)}>\n            Set Name: \n            <input \n              id=\"filterString\" \n              className=\"form-control\" \n              placeholder=\"Type new set name here\" \n              onChange={this.setNameHandler}\n              value={newName}\n              autoComplete=\"off\"\n            />\n            <button\n              className=\"hidden\"\n              type=\"submit\"\n              aria-label=\"submit\" \n            />\n          </form>\n        );\n      } else {\n        const text = `Set Name: ${workingSet.name}`;\n        setNameDiv = (\n          <div\n            onClick={() => this.startRename(workingSet.name)}\n            onKeyPress={this.handleKeyPress}\n            role=\"button\"\n            tabIndex=\"0\"\n          >\n            {text}\n          </div>\n        );\n      }\n\n      sets = (\n        <div className=\"setPanel\">\n          <div className=\"panelRow\">\n            <div className=\"panelData\">\n              {setNameDiv}\n            </div>\n            <div className=\"panelData\">\n              {`Group: ${workingSet.group}`}\n            </div>\n            <div className=\"panelData\">\n              {`Patch: ${workingSet.expansion}`}\n            </div>\n          </div>\n          <div className=\"panelRow\">\n            <div className=\"panelData\">\n              {'Items: '}\n              {slotList}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    let items = '';\n    if (selectedSlot) {\n      items = (\n        <table className=\"table table-hover table-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Item ID</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sourceList\n              .filter((source) => source.name \n                && Number(source.categoryID) === Number(selectedSlot)\n                && !visualMetaHash[source.visualID].isAssigned\n                && (\n                  source.name.toLowerCase().includes(filterString.toLowerCase())\n                  || source.itemID.toString().includes(filterString)))\n              .sort((a, b) => b.itemID - a.itemID)\n              .map((row) => {\n                let rowClass = '';\n                if (row.isCollected) { rowClass += 'collected'; }\n\n                return (\n                  <tr\n                    key={row.sourceID}\n                    onClick={() => this.setSelected('visual', row)}\n                    className={rowClass}\n                  >\n                    <td>{row.name}</td>\n                    <td>{row.itemID}</td>\n                    <td>{row.isCollected ? '✅' : ''}</td>\n                  </tr>\n                );\n              })\n              .slice(0, 100)\n            }\n          </tbody>\n        </table>\n      );\n    }\n\n    return (\n      <div className=\"EditSets\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-7\">\n              <div className=\"data-table\">\n                {sets}\n              </div>\n            </div>\n            <div className=\"col-5\">\n              <div className=\"filters form-group\">\n                <input \n                  id=\"filterString\" \n                  className=\"form-control\" \n                  placeholder=\"Type item name here to start filtering...\" \n                  onChange={this.searchFieldHandler} \n                  value={filterString} \n                  autoComplete=\"off\"\n                />\n              </div>\n              <div className=\"data-table\">\n                {items}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEditSets.propTypes = {\n  transmogSetList: PropTypes.array.isRequired,\n  match: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  visualMetaHash: PropTypes.object.isRequired,\n  sourceList: PropTypes.array.isRequired,\n  sourceIDHash: PropTypes.object.isRequired,\n  addVisualToSet: PropTypes.func.isRequired,\n  updateSetName: PropTypes.func.isRequired,\n  removeVisualFromSet: PropTypes.func.isRequired,\n  updateVisualMetaData: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  transmogSetList: state.transmogSetList,\n  sourceList: state.sourceList,\n  sourceIDHash: state.sourceIDHash,\n  visualMetaHash: state.visualMetaHash,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addVisualToSet: (changingSet, slot, sourceID) => dispatch({\n    type: actionTypes.ADD_VISUAL_TO_SET,\n    data: { changingSet, slot, sourceID }\n  }),  \n  updateSetName: (changingSet, newName) => dispatch({\n    type: actionTypes.RENAME_TRANSMOG_SET,\n    data: { changingSet, newName }\n  }),  \n  removeVisualFromSet: (changingSet, slot, visualID) => dispatch({\n    type: actionTypes.REMOVE_VISUAL_FROM_SET,\n    data: { changingSet, slot, visualID }\n  }),\n  updateVisualMetaData: (visualMetaData) => dispatch({\n    type: actionTypes.UPDATE_VISUAL_META_DATA,\n    data: visualMetaData \n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(EditSets));\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport * as actionTypes from '../../store/actions';\nimport config from '../../config';\n\nimport './EditVisual.css';\n\n\nclass EditVisual extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { visualID: null };\n  }\n    \n\n    componentDidMount() {\n      const { match } = this.props;\n      if (match.params && match.params.visualID) {\n        this.setState({ visualID: match.params.visualID });\n      }\n    }\n\n    updateVisualMetaName = async (sourceID) => {\n      const { visualID } = this.state;\n      const { sourceIDHash, visualMetaHash, updateVisualMetaData, history } = this.props;\n\n      const newName = sourceIDHash[sourceID].name;\n      \n      try {\n        const updateObject = { ...visualMetaHash[visualID] };\n        updateObject.name = newName;\n        delete updateObject.sources;\n\n        const result = await axios.post(`${config.SITE_BACKEND}/visuals/${visualID}`, updateObject);\n        console.log('--> axios visualMeta update result :', result);\n        \n        const newVisualMeta = visualMetaHash[visualID];\n        newVisualMeta.name = newName;\n        updateVisualMetaData([newVisualMeta]);\n        history.goBack();\n      } catch (err) {\n        console.log(`Error updating visualMeta for visualID:${visualID}`);\n      }\n    }\n\n    render() {\n      const { visualID } = this.state;\n      const { visualMetaHash } = this.props;\n        let visualMeta = '';\n        let items = '';\n        if (visualMetaHash && visualMetaHash[visualID]) {\n            const visual = visualMetaHash[visualID];\n            const sources = (Array.isArray(visual.sources)) ? visual.sources : [];\n\n            visualMeta = (\n              <div className=\"visual-meta\">\n                <div className=\"visual-name\">\n                  {visual.name}\n                </div>\n                <div className=\"instructions\">\n                        Click an item to promote it to primary name.\n                </div>\n              </div>\n            );\n            \n            items = (\n              <table className=\"table table-hover table-dark\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Item ID</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sources.map((row) => (\n                    <tr \n                      key={row.sourceID} \n                      onClick={() => this.updateVisualMetaName(row.sourceID)}\n                    >\n                      <td>{row.name}</td>\n                      <td>{row.itemID}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            );\n        }\n\n        return (\n          <div className=\"container\">\n            <div className=\"visual-panel col-7\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  {visualMeta}\n                </div>\n                <div className=\"row\">\n                  <div className=\"data-table\">\n                    {items}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n}\n\nEditVisual.propTypes = {\n  sourceIDHash: PropTypes.object.isRequired,\n  visualMetaHash: PropTypes.object.isRequired,\n  updateVisualMetaData: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    sourceIDHash: state.sourceIDHash,\n    visualMetaHash: state.visualMetaHash,\n    userData: state.userData,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateVisualMetaData: (visualMetaData) => dispatch({\n    type: actionTypes.UPDATE_VISUAL_META_DATA,\n    data: visualMetaData \n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(EditVisual));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport * as actionTypes from '../../store/actions';\n// import constants from '../../constants';\nimport config from '../../config';\n\nimport './Scraper.css';\n\nclass Scraper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      filterString: '',\n    };\n  }\n\n  rawDataFieldHandler = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  addSearchStringHandler = (event) => {\n    this.setState({ filterString: event.target.value });\n  }\n\n  saveData = async (newList) => {\n    try {\n      await axios.post(`${config.SITE_BACKEND}/import`, { data: newList });\n    } catch (err) {\n      console.log('Axios Error');\n      console.log(err);\n      console.log(err.config);\n    }\n  }\n\n  filterByName = (newFilterString, sourceList) => sourceList\n    .filter((item) => (\n      item && item.name \n      && (newFilterString === '' || item.name.toLowerCase().includes(newFilterString.toLowerCase()))\n    ))\n    .sort((a, b) => b.sourceID - a.sourceID)\n    .slice(0, 50)\n\n  // process and transfer input to output\n  async addDataClick() {\n    const { input } = this.state;\n    const { addScrapedData } = this.props;\n\n    try {\n      const parsedData = JSON.parse(input);\n      // const newList = { ...sourceIDHash };\n      // parsedData.forEach((item, i) => {\n      //   parsedData[i].itemModID = `${constants.MOD_ID[parsedData[i].itemModID] || ''}`;\n      //   parsedData[i].categoryID = `${constants.CATEGORY[parsedData[i].categoryID] || ''}`;\n      //   parsedData[i].invType = `${constants.INVENTORY_TYPE[parsedData[i].invType] || ''}`;\n      //   parsedData[i].quality = `${constants.ITEM_QUALITY[parsedData[i].quality] || ''}`;\n      //   parsedData[i].sourceType = `${constants.TRANSMOG_SOURCE[parsedData[i].sourceType] || ''}`;\n      //   newList[parsedData[i].sourceID] = parsedData[i];\n      // });\n\n      await this.saveData(parsedData);\n      addScrapedData(parsedData);\n      this.setState({ input: '' });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { input, filterString } = this.state;\n    const { sourceList } = this.props;\n    \n    const filteredList = this.filterByName(filterString, sourceList);\n\n    let output = '';\n    if (sourceList.length > 0) {\n      output = (\n        <div className=\"data-table\">\n          <table className=\"table table-hover table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">sourceID</th>\n                <th scope=\"col\">itemID</th>\n                <th scope=\"col\">name</th>\n                <th scope=\"col\">invType</th>\n                <th scope=\"col\">visualID</th>\n                <th scope=\"col\">quality</th>\n                <th scope=\"col\">itemModID</th>\n                <th scope=\"col\">categoryID</th>\n                <th scope=\"col\">sourceType</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredList.map((row) => (\n                <tr className={row.isCollected ? 'green' : ''} key={row.sourceID}>\n                  <th scope=\"row\">{row.sourceID}</th>\n                  <td>{row.itemID}</td>\n                  <td>{row.name}</td>\n                  <td>{row.invType}</td>\n                  <td>{row.visualID}</td>\n                  <td>{row.quality}</td>\n                  <td>{row.itemModID}</td>\n                  <td>{row.categoryID}</td>\n                  <td>{row.sourceType}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Scraper\">\n        <div className=\"form-group\">\n          <label htmlFor=\"rawInput\">\n            Input:\n            <textarea\n              id=\"rawInput\"\n              className=\"form-control\"\n              rows=\"5\"\n              placeholder=\"Paste Data Here\"\n              onChange={this.rawDataFieldHandler}\n              value={input}\n            />\n          </label>\n        </div>\n        <div className=\"button-group\">\n          <button\n            type=\"button\"\n            onClick={() => this.addDataClick()}\n          >\n            Add Data\n          </button>\n        </div>\n        <div className=\"filters form-group\">\n          <label htmlFor=\"filterString\">\n            Search:\n            <input\n              id=\"filterString\"\n              className=\"form-control\"\n              placeholder=\"search for...\"\n              onChange={this.addSearchStringHandler}\n              value={filterString}\n              autoComplete=\"off\"\n            />\n          </label>\n        </div>\n        <div className=\"outputField\">\n          {output}\n        </div>\n      </div>\n    );\n  }\n}\n\nScraper.propTypes = {\n  sourceList: PropTypes.array.isRequired,\n  addScrapedData: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  sourceList: state.sourceList,\n  userData: state.userData,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addScrapedData: (newData) => dispatch({\n    type: actionTypes.ADD_SOURCE_DATA,\n    data: newData\n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Scraper);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport * as actionTypes from '../../store/actions';\nimport * as db from '../../db';\nimport config from '../../config';\n\nclass LoginSuccess extends Component {\n  async componentDidMount() {\n    const {\n      updateAppState, \n      updateUserCollection,\n      history,\n      location\n    } = this.props;\n\n    const values = queryString.parse(location.search);\n\n    const incomingUserData = {};\n    const { \n      access_token: battleNetToken,\n      id: userId,\n      battletag: battleTag,\n     } = values;\n    \n    incomingUserData.battleNetToken = battleNetToken;\n    incomingUserData.userId = userId;\n    incomingUserData.battleTag = decodeURIComponent(battleTag);\n    \n    try {\n      const blizzCharUrl = 'https://us.api.blizzard.com/wow/user/characters';\n      const characterResult = await axios({ \n        url: blizzCharUrl,\n        params: { access_token: battleNetToken }\n      });\n\n      updateAppState('userCharacterData', characterResult.data.characters);\n\n      incomingUserData.characterData = characterResult.data.characters;\n    } catch (err) {\n      console.log('--> bnet request err :', err);\n    }\n\n    axios.defaults.headers.common.id = userId;\n    axios.defaults.headers.common.authorization = `Bearer ${battleNetToken}`;\n\n    try {\n      const userResult = await axios({ url: `${config.SITE_BACKEND}/user/${userId}` });\n      if (userResult.data) {\n        incomingUserData.collected = userResult.data.collected;\n        incomingUserData.role = userResult.data.role;\n      }\n      \n      updateAppState('userData', incomingUserData);\n      db.putData('userData', incomingUserData);\n      updateUserCollection(incomingUserData.collected);\n  \n      if (incomingUserData.collected) {\n        history.push('/');\n      } else {\n        history.push('/user'); // new users prompt to add collection data\n      }\n    } catch (err) {\n      console.log('--> user data request err :', err);\n      history.push('/');\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Battlenet Login Successful</h1>\n        <p>Retrieving account info...</p>\n      </div>\n    );\n  }\n}\n\nLoginSuccess.propTypes = {\n  history: PropTypes.object.isRequired,\n  updateAppState: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired,\n  updateUserCollection: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ userData: state.userData, });\n\nconst mapDispatchToProps = (dispatch) => ({ \n  updateUserCollection: (collected) => dispatch({\n    type: actionTypes.ADD_USER_DATA,\n    data: collected\n  }),\n  updateAppState: (key, value) => dispatch({ \n    type: actionTypes.ADD_STATE, \n    data: { key, value } \n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(LoginSuccess));\n","/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport * as actionTypes from '../store/actions';\nimport * as db from '../db';\nimport User from './User/User';\nimport Main from './Main/Main';\nimport CreateSets from './CreateSets/CreateSets';\nimport EditSets from './EditSets/EditSets';\nimport EditVisual from './EditVisual/EditVisual';\nimport Scraper from './Scraper/Scraper';\n// import Login from './Login/Login';\nimport LoginSuccess from './LoginSuccess/LoginSuccess';\nimport config from '../config';\n\nimport './Navigator.css';\n\nclass Navigator extends Component {\n  async componentDidMount() {\n    const {\n      transmogSetList,\n      loadSetData,\n      updateVisualMetaData,\n      sourceList,\n      addSourceData,\n      updateAppState,\n      visualMetaHash,\n    } = this.props;\n\n    // Since the Navigator is the primary container window, we must load the initial state here\n\n    // user Data\n    const userDataQuery = await db.getData('userData');\n    if (userDataQuery) {\n      axios.defaults.headers.common.id = userDataQuery.data.userId;\n      updateAppState('userData', userDataQuery.data);\n    }\n\n    // Set Data - load cache then update from db\n    if (!transmogSetList || transmogSetList.length === 0) {\n      let result = await db.getData('sets');\n      if (result) {\n        console.log('-- set list loaded from memory --');\n        loadSetData(result.data);\n      }\n\n      try {\n        result = await axios.get(`${config.SITE_BACKEND}/sets`);\n        db.putData('sets', result.data);\n        console.log('-- Axios: set list updated --');\n        loadSetData(result.data);\n      } catch (err) {\n        console.log(`Error fetching set list: ${err}`);\n      }\n    }\n\n    // Visual Metas - load cache then update from db\n    let visualsList;\n    if (!visualMetaHash || Object.keys(visualMetaHash).length === 0) {\n      let result = await db.getData('visuals');\n      if (result) {\n        console.log('-- DB: visuals loaded --');\n        updateVisualMetaData(result.data);\n        visualsList = result.data;\n        console.log('--> visualsList :', visualsList);\n      }\n\n      try {\n        result = await axios.get(`${config.SITE_BACKEND}/visuals`);\n        console.log('-- Axios: visuals updated --');\n        db.putData('visuals', result.data);\n        updateVisualMetaData(result.data);\n        visualsList = result.data;\n        console.log('--> visualsList :', visualsList);\n      } catch (err) {\n        console.log(`Error fetching visual meta data: ${err}`);\n      }\n    }\n    \n    // Full source list\n    if (!sourceList || Object.keys(sourceList).length === 0) {\n      let result = await db.getData('sourceList');\n      if (result && result.data) {\n        console.log('-- DB: sources loaded --');\n        addSourceData(result.data);\n      }\n      \n      try {\n        result = await axios.get(`${config.SITE_BACKEND}/sources`);\n        console.log('-- Axios: sources updated --');\n        if (result && result.data) {\n          db.putData('sourceList', result.data);\n          addSourceData(result.data);\n        }\n      } catch (err) {\n        console.log(`Error fetching full item list: ${err}`);\n      }\n    }\n  }\n  \n  // toggleModal = () => {\n  //   const { showLogin } = this.state;\n  //   this.setState({ showLogin: !showLogin });\n  // }\n\n  render() {\n    // const { showLogin } = this.state;\n    const { userData } = this.props;\n\n    let loginComponent = (\n      <li>\n        <NavLink\n          to=\"/login\"\n          exact\n          activeClassName=\"battle-net-login-button\"\n        >\n          Login using Battle.Net\n        </NavLink>\n      </li>\n    );\n\n    if (userData && userData.battleTag) {\n      loginComponent = (\n        <li>\n          <NavLink\n            to=\"/user\"\n            exact\n            className=\"logged-in-button\"\n          >\n            {`Logged in as ${userData.battleTag}`}\n          </NavLink>\n        </li>\n      );\n    }\n\n    const adminOnly = (userData.role === 'admin') ? {} : { display: 'none' };\n    const writeOnly = (userData.role === 'admin' || userData.role === 'write') ? {} : { display: 'none' };\n    return (\n      <div className=\"Navigator\">\n        <header>\n          <nav>\n            <ul>\n              <li>\n                <NavLink\n                  to=\"/\"\n                  exact\n                  activeClassName=\"my-active-link\"\n                >\n                  Main\n                </NavLink>\n              </li>\n              <li style={writeOnly}>\n                <NavLink\n                  to=\"/set/new\"\n                  exact\n                  activeClassName=\"my-active-link\"\n                >\n                  Create Sets\n                </NavLink>\n              </li>\n              <li style={adminOnly}>\n                <NavLink\n                  to=\"/scraper\"\n                  exact\n                  activeClassName=\"my-active-link\"\n                >\n                  Scraper\n                </NavLink>\n              </li>\n\n              {loginComponent}\n              \n\n              {/* <li>\n                <button \n                  type=\"button\"\n                  className=\"btn btn-primary short\"\n                  onClick={this.toggleModal}\n                >\n                  Login\n                </button>\n              </li> */}\n            </ul>\n          </nav>\n        </header>\n        <Switch>\n          {/* Optional; specify only one Route match; used when path names are too similar */}\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/user\" component={User} />\n          <Route exact path=\"/set/new\" component={CreateSets} />\n          <Route exact path=\"/set/edit/:setId\" component={EditSets} />\n          <Route exact path=\"/visual/edit/:visualID\" component={EditVisual} />\n          <Route exact path=\"/scraper\" component={Scraper} />\n          <Route\n            exact\n            path=\"/login\"\n            render={() => { \n              // send client browser to backend oauth page\n              window.location = `${config.SITE_BACKEND}/login`; \n            }}\n          />\n          <Route \n            exact \n            path=\"/login_success\" \n            render={(routeProps) => (\n              <LoginSuccess \n                {...routeProps}\n              />\n            )}\n          />\n        </Switch>\n        {/* <div className={`container ${showLogin ? 'modal-open' : ''}`}>\n          <Login \n            toggle={this.toggleModal}\n            showModal={showLogin}\n          />\n        </div> */}\n      </div>\n    );\n  }\n}\n\nNavigator.propTypes = {\n  transmogSetList: PropTypes.array.isRequired,\n  sourceList: PropTypes.array.isRequired,\n  visualMetaHash: PropTypes.object.isRequired,\n  loadSetData: PropTypes.func.isRequired,\n  updateVisualMetaData: PropTypes.func.isRequired,\n  addSourceData: PropTypes.func.isRequired,\n  userData: PropTypes.object.isRequired,\n  history: PropTypes.object,\n  updateAppState: PropTypes.func.isRequired,\n\n};\n\nNavigator.defaultProps = { history: {}, };\n\nconst mapStateToProps = (state) => ({\n  sourceList: state.sourceList,\n  transmogSetList: state.transmogSetList,\n  visualMetaHash: state.visualMetaHash,\n  userData: state.userData,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadSetData: (setData) => dispatch({ type: actionTypes.LOAD_TRANSMOG_SETS, data: setData }),\n  updateVisualMetaData: (visualMetaData) => dispatch({\n    type: actionTypes.UPDATE_VISUAL_META_DATA,\n    data: visualMetaData \n  }),\n  addSourceData: (newData) => dispatch({ type: actionTypes.ADD_SOURCE_DATA, data: newData }),\n  updateAppState: (key, value) => dispatch({ \n    type: actionTypes.ADD_STATE, \n    data: { key, value } \n  }) \n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigator);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Navigator from './containers/Navigator';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navigator />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\nimport constants from '../constants';\n\n// import * as updateVisualMetaHash from './lib/buildVisualMetaHash';\n\n/**\n * \"source\" is the information returned from WoW API C_TransmogCollection.GetSourceInfo(sourceID)\n *          which provides the item name, categoryID (slot), visualID, and isCollected.\n * \n * \"visualMeta\" is the name and description of a transmog appearance item. Each appearance can be \n *          obtained by collecting one of several source items which all share the same visualID. \n *          These might have different names, so the name assigned to the visualMeta is what appears\n *          in the game's Appearances tab.\n */\n\nconst initialState = {\n    /** sourceList - Array\n     *      List of source objects scraped from WoW API\n     */\n    sourceList: [],\n\n    /** sourceIDHash - Object\n     *      Key: sourceID \n     *      Value: item data indexed by sourceID including user's collection data\n     * \n     *      Why create a hash? SourceIds are unique identifiers, making them perfect keys. And\n     *          using the sourceId, it is way easier to both look up and update a specific item,\n     *          guaranteeing only one will be in the list. So since the hash will be used every\n     *          time there's an update, why not keep it around and use it instead of creating\n     *          it and dumping it?\n     */\n    sourceIDHash: {},\n\n    /**  transmogSetList - Array\n     *      List of transmog sets or unofficial outfits.\n     *      Includes the set or outfit name and tracks which visualMeta goes in each slot.\n     */\n    transmogSetList: [],\n\n    /** visualMetaHash - Object\n     *      Key: visualID\n     *      Value: visualMeta loaded from back end and constructed on front end \n     */\n    visualMetaHash: {},\n\n    /** userData - Object\n     *      User info and collected sourceID list pulled from WoW API by Completionist Addon and\n     *      imported into the website manually by the user.\n     *      Each source returned from the API query will include the property \"isCollected\",\n     *      which the addon uses to construct a list of collected sourceIDs.\n     */\n    userData: { characterData: [], collected: [] },\n    userCharacterData: [], // TODO: Only use userData instead of this\n\n    battleNetToken: null,\n};\n\nconst updateVisualMetaHash = (sourceList, visualMetaHash, userCollectedSources = []) => {\n    const workingVisualHash = { ...visualMetaHash };\n    sourceList.forEach((source) => {\n        const { visualID } = source;\n        if (!visualID) {\n            return;\n        }\n        if (!workingVisualHash[visualID]) {\n            workingVisualHash[visualID] = { sources: [source] };\n        } else if (!workingVisualHash[visualID].sources) {\n            workingVisualHash[visualID].sources = [source];\n        } else {\n            const dupe = workingVisualHash[visualID]\n                .sources.find((i) => i.sourceID === source.sourceID);\n            if (!dupe) {\n                workingVisualHash[visualID].sources.push(source);\n                workingVisualHash[visualID].sources.sort((a, b) => ((b.name > (a.name || '')) ? 1 : -1));\n            }\n        }\n\n        if (!workingVisualHash[visualID].name && source.name) {\n            workingVisualHash[visualID].name = source.name;\n        }\n        if (!workingVisualHash[visualID].categoryID && source.categoryID) {\n            workingVisualHash[visualID].categoryID = source.categoryID;\n        }\n        if (!workingVisualHash[visualID].isHideVisual && source.isHideVisual) {\n            workingVisualHash[visualID].isHideVisual = source.isHideVisual;\n        }\n        if (userCollectedSources.includes(source.sourceID)) {\n            workingVisualHash[visualID].isCollected = true;\n        }\n    });\n    \n    return workingVisualHash;\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SOURCE_DATA: {\n            const workingSourceHash = { ...state.sourceIDHash };\n            const { collected } = state.userData;\n\n            const sourceList = action.data;\n\n            sourceList.forEach((source) => {\n                workingSourceHash[source.sourceID] = source;\n            });\n\n            collected.forEach((sourceID) => {\n                if (workingSourceHash[sourceID]) {\n                    workingSourceHash[sourceID].isCollected = true;\n                }\n            });\n\n            const newSourceList = Object.values(workingSourceHash);\n\n            const updatedVisualMetaHash = updateVisualMetaHash(\n                newSourceList, \n                state.visualMetaHash, \n                collected\n            );\n\n            return {\n                ...state,\n                sourceList: newSourceList,\n                sourceIDHash: workingSourceHash,\n                visualMetaHash: updatedVisualMetaHash,\n            };\n        }\n\n        case actionTypes.ADD_USER_DATA: {\n            const workingSourceHash = { ...state.sourceIDHash };\n            const workingUserData = { ...state.userData, ...action.data };\n\n            console.log('--> ADD_USER_DATA workingUserData :', workingUserData);\n\n            workingUserData.collected.forEach((sourceID) => {\n                if (workingSourceHash[sourceID]) {\n                    workingSourceHash[sourceID].isCollected = true;\n                }\n            });\n\n            const updatedVisualMetaHash = updateVisualMetaHash(\n                state.sourceList, \n                state.visualMetaHash, \n                workingUserData.collected\n            );\n\n            return {\n                ...state,\n                visualMetaHash: updatedVisualMetaHash,\n                userData: workingUserData,\n                sourceIDHash: workingSourceHash,\n            };\n        }\n\n        case actionTypes.UPDATE_VISUAL_META_DATA: {\n            const workingVisualMetaHash = { ...state.visualMetaHash };\n            action.data.forEach((visualMeta) => {\n                const combined = {\n                     \n                    ...workingVisualMetaHash[visualMeta.visualID], \n                    ...visualMeta\n                };\n                workingVisualMetaHash[visualMeta.visualID] = combined;\n            });\n\n            return {\n                ...state,\n                visualMetaHash: workingVisualMetaHash\n            };\n        }\n\n        case actionTypes.ADD_TRANSMOG_SET: {\n            const workingTransmogSetList = [action.data, ...state.transmogSetList];\n\n            return {\n                ...state,\n                transmogSetList: workingTransmogSetList\n            };\n        }\n\n        case actionTypes.LOAD_TRANSMOG_SETS: {\n            const workingVisualMetaHash = { ...state.visualMetaHash };\n            const { transmogSetList } = state;\n            const newSetData = action.data;\n\n            const setHash = {};\n            transmogSetList.forEach((set) => {\n                setHash[set.setId] = set;\n            });\n\n            newSetData.forEach((set) => {\n                setHash[set.setId] = set;\n                Object.values(constants.MOG_SLOTS).forEach((slotNumber) => {\n                    const visualID = set[slotNumber];\n                    if (!workingVisualMetaHash[visualID]) workingVisualMetaHash[visualID] = {};\n                    workingVisualMetaHash[visualID].isAssigned = true;\n                });\n            });\n\n            const newSetList = Object.values(setHash);\n\n            return {\n                ...state,\n                visualMetaHash: workingVisualMetaHash,\n                transmogSetList: newSetList\n            };\n        }\n\n        case actionTypes.ADD_VISUAL_TO_SET: {\n            const workingTransmogSetList = [...state.transmogSetList];\n            const workingVisualMetaHash = { ...state.visualMetaHash };\n            \n            const { changingSet, slot, sourceID } = action.data;\n\n            const { visualID, name } = state.sourceIDHash[sourceID];\n            \n            const setIndex = workingTransmogSetList.findIndex((set) => (\n                set.setId === changingSet));\n\n            workingTransmogSetList[setIndex][slot] = visualID;\n\n            workingVisualMetaHash[visualID].name = name;\n            workingVisualMetaHash[visualID].isAssigned = true;\n\n            return {\n                ...state,\n                transmogSetList: workingTransmogSetList,\n                visualMetaHash: workingVisualMetaHash\n            };\n        }\n\n        case actionTypes.RENAME_TRANSMOG_SET: {\n            const workingTransmogSetList = [...state.transmogSetList];\n\n            const { changingSet, newName } = action.data;\n            \n            const setIndex = workingTransmogSetList.findIndex((set) => (\n                set.setId === changingSet));\n\n            workingTransmogSetList[setIndex].name = newName;\n\n            return {\n                ...state,\n                transmogSetList: workingTransmogSetList\n            };\n        }\n\n        case actionTypes.REMOVE_VISUAL_FROM_SET: {\n            const workingTransmogSetList = [...state.transmogSetList];\n            const workingVisualMetaHash = { ...state.visualMetaHash };\n            const { changingSet, slot, visualID } = action.data;\n\n            const setIndex = workingTransmogSetList.findIndex((set) => (\n                set.setId === changingSet));\n\n            workingTransmogSetList[setIndex][slot] = null;\n            workingVisualMetaHash[visualID].isAssigned = false;\n\n            return {\n                ...state,\n                visualMetaHash: workingVisualMetaHash,\n                transmogSetList: workingTransmogSetList\n            };\n        }\n        \n        case actionTypes.ADD_STATE: {\n            const stateClone = { ...state };\n            stateClone[action.data.key] = action.data.value;\n\n            return stateClone;\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux Setup\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}